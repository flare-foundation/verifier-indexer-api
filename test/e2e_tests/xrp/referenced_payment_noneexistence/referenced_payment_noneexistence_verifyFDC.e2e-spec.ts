import { expect } from "chai";
import * as request from "supertest";
import { app } from "../helper";


describe("/ReferencedPaymentNonexistence/verifyFDC", () => {
    it("should get status", async () => {
        const payload = {
            abiEncodedRequest: "0x5265666572656e6365645061796d656e744e6f6e6578697374656e636500000074657374585250000000000000000000000000000000000000000000000000006675c33d8ab47569c584a231fb0ff9f68394cfdc34d8134f215c736c9ccc8ccb00000000000000000000000000000000000000000000000000000000002bf9e600000000000000000000000000000000000000000000000000000000002bfa52000000000000000000000000000000000000000000000000000000006752bff4ec2d249c05488d71d6e73e7c82f9f070fe3e0fb55477be02f50b72366ac180d90000000000000000000000000000000000000000000000000000000132be4e6a464250526641000100000000000000000000000000000000000000000006c11000000000000000000000000000000000000000000000000000000000000000017006716ece630ed05048e9f87debac44c23292fbd9b022942321e9a78e4255cc"
        }
        const response = await request(app.getHttpServer())
            .post("/ReferencedPaymentNonexistence/verifyFDC")
            .send(payload)
            .set('X-API-KEY', '12345')
            .expect(200)
            .expect('Content-Type', /json/)

        expect(response.body.status).to.be.equal('VALID');
    });
    it("should get abiEncodedResponse without 0x in abiEncodedRequest", async () => {
        const payload = {
            abiEncodedRequest: "5265666572656e6365645061796d656e744e6f6e6578697374656e636500000074657374585250000000000000000000000000000000000000000000000000006675c33d8ab47569c584a231fb0ff9f68394cfdc34d8134f215c736c9ccc8ccb00000000000000000000000000000000000000000000000000000000002bf9e600000000000000000000000000000000000000000000000000000000002bfa52000000000000000000000000000000000000000000000000000000006752bff4ec2d249c05488d71d6e73e7c82f9f070fe3e0fb55477be02f50b72366ac180d90000000000000000000000000000000000000000000000000000000132be4e6a464250526641000100000000000000000000000000000000000000000006c11000000000000000000000000000000000000000000000000000000000000000017006716ece630ed05048e9f87debac44c23292fbd9b022942321e9a78e4255cc",
        }
        const response = await request(app.getHttpServer())
            .post("/ReferencedPaymentNonexistence/verifyFDC")
            .send(payload)
            .set('X-API-KEY', '12345')
            .expect(200)
            .expect('Content-Type', /json/)

        expect(response.body.status).to.be.equal('VALID');
    });
    it("should get abiEncodedResponse with 0X in abiEncodedRequest", async () => {
        const payload = {
            abiEncodedRequest: "0X5265666572656e6365645061796d656e744e6f6e6578697374656e636500000074657374585250000000000000000000000000000000000000000000000000006675c33d8ab47569c584a231fb0ff9f68394cfdc34d8134f215c736c9ccc8ccb00000000000000000000000000000000000000000000000000000000002bf9e600000000000000000000000000000000000000000000000000000000002bfa52000000000000000000000000000000000000000000000000000000006752bff4ec2d249c05488d71d6e73e7c82f9f070fe3e0fb55477be02f50b72366ac180d90000000000000000000000000000000000000000000000000000000132be4e6a464250526641000100000000000000000000000000000000000000000006c11000000000000000000000000000000000000000000000000000000000000000017006716ece630ed05048e9f87debac44c23292fbd9b022942321e9a78e4255cc",
        }
        const response = await request(app.getHttpServer())
            .post("/ReferencedPaymentNonexistence/verifyFDC")
            .send(payload)
            .set('X-API-KEY', '12345')
            .expect(200)
            .expect('Content-Type', /json/)

        expect(response.body.status).to.be.equal('VALID');
    });
    it("should get bad request (400) with empty payload", async () => {
        const payload = {
        }
        await request(app.getHttpServer())
            .post("/ReferencedPaymentNonexistence/verifyFDC")
            .send(payload)
            .set('X-API-KEY', '12345')
            .expect(400)
    });
    it("should get bad request (400) with non hexadecimal character in abiEncodedRequest", async () => {
        const payload = {
            abiEncodedRequest: "0xp265666572656e6365645061796d656e744e6f6e6578697374656e636500000074657374585250000000000000000000000000000000000000000000000000006675c33d8ab47569c584a231fb0ff9f68394cfdc34d8134f215c736c9ccc8ccb00000000000000000000000000000000000000000000000000000000002bf9e600000000000000000000000000000000000000000000000000000000002bfa52000000000000000000000000000000000000000000000000000000006752bff4ec2d249c05488d71d6e73e7c82f9f070fe3e0fb55477be02f50b72366ac180d90000000000000000000000000000000000000000000000000000000132be4e6a464250526641000100000000000000000000000000000000000000000006c11000000000000000000000000000000000000000000000000000000000000000017006716ece630ed05048e9f87debac44c23292fbd9b022942321e9a78e4255cc",
        }
        await request(app.getHttpServer())
            .post("/ReferencedPaymentNonexistence/verifyFDC")
            .send(payload)
            .set('X-API-KEY', '12345')
            .expect(400)
    });
});











