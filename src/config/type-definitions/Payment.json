{
  "name": "Payment",
  "fullComment": " @custom:name Payment\n @custom:id 0x01\n @custom:supported BTC, DOGE, XRP, testBTC, testDOGE, testXRP\n @author Flare\n @notice A relay of a transaction on an external chain that is considered a payment in a native currency.\n Various blockchains support different types of native payments. For each blockchain, it is specified how a payment\n transaction should be formed to be provable by this attestation type.\n The provable payments emulate traditional banking payments from entity A to entity B in native currency with an optional payment reference.\n @custom:verification The transaction with `transactionId` is fetched from the API of the blockchain node or relevant indexer.\n If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\n Once the transaction is received, the [payment summary](/specs/attestations/external-chains/transactions.md#payment-summary) is computed according to the rules for the source chain.\n If the summary is successfully calculated, the response is assembled from the summary.\n `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data.\n For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block.\n For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time.\n If the summary is not successfully calculated, the attestation request is rejected.\n @custom:lut `blockTimestamp`",
  "description": "A relay of a transaction on an external chain that is considered a payment in a native currency.\n Various blockchains support different types of native payments. For each blockchain, it is specified how a payment\n transaction should be formed to be provable by this attestation type.\n The provable payments emulate traditional banking payments from entity A to entity B in native currency with an optional payment reference.",
  "supported": [
    "BTC",
    "DOGE",
    "XRP",
    "testBTC",
    "testDOGE",
    "testXRP"
  ],
  "verification": "The transaction with `transactionId` is fetched from the API of the blockchain node or relevant indexer.\n If the transaction cannot be fetched or the transaction is in a block that does not have a sufficient [number of confirmations](/specs/attestations/configs.md#finalityconfirmation), the attestation request is rejected.\n Once the transaction is received, the [payment summary](/specs/attestations/external-chains/transactions.md#payment-summary) is computed according to the rules for the source chain.\n If the summary is successfully calculated, the response is assembled from the summary.\n `blockNumber` and `blockTimestamp` are retrieved from the block if they are not included in the transaction data.\n For Bitcoin and Dogecoin, `blockTimestamp` is mediantime of the block.\n For XRPL, `blockTimestamp` is close time of the ledger converted to UNIX time.\n If the summary is not successfully calculated, the attestation request is rejected.\n ",
  "lut": "`blockTimestamp`",
  "proof": {
    "name": "Proof",
    "description": "Toplevel proof",
    "above": "",
    "below": "",
    "fullComment": " @notice Toplevel proof\n @param merkleProof Merkle proof corresponding to the attestation response.\n @param data Attestation response.",
    "params": [
      {
        "name": "merkleProof",
        "type": "bytes32[]",
        "typeSimple": "bytes32[]",
        "comment": "Merkle proof corresponding to the attestation response."
      },
      {
        "name": "data",
        "type": "struct Payment.Response",
        "typeSimple": "Response",
        "comment": "Attestation response."
      }
    ]
  },
  "request": {
    "name": "Request",
    "description": "Toplevel request",
    "above": "",
    "below": "",
    "fullComment": " @notice Toplevel request\n @param attestationType ID of the attestation type.\n @param sourceId ID of the data source.\n @param messageIntegrityCode `MessageIntegrityCode` that is derived from the expected response.\n @param requestBody Data defining the request. Type (struct) and interpretation is determined by the `attestationType`.",
    "params": [
      {
        "name": "attestationType",
        "type": "bytes32",
        "typeSimple": "bytes32",
        "comment": "ID of the attestation type."
      },
      {
        "name": "sourceId",
        "type": "bytes32",
        "typeSimple": "bytes32",
        "comment": "ID of the data source."
      },
      {
        "name": "messageIntegrityCode",
        "type": "bytes32",
        "typeSimple": "bytes32",
        "comment": "`MessageIntegrityCode` that is derived from the expected response."
      },
      {
        "name": "requestBody",
        "type": "struct Payment.RequestBody",
        "typeSimple": "RequestBody",
        "comment": "Data defining the request. Type (struct) and interpretation is determined by the `attestationType`."
      }
    ]
  },
  "response": {
    "name": "Response",
    "description": "Toplevel response",
    "above": "",
    "below": "",
    "fullComment": " @notice Toplevel response\n @param attestationType Extracted from the request.\n @param sourceId Extracted from the request.\n @param votingRound The ID of the State Connector round in which the request was considered.\n @param lowestUsedTimestamp The lowest timestamp used to generate the response.\n @param requestBody Extracted from the request.\n @param responseBody Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`.",
    "params": [
      {
        "name": "attestationType",
        "type": "bytes32",
        "typeSimple": "bytes32",
        "comment": "Extracted from the request."
      },
      {
        "name": "sourceId",
        "type": "bytes32",
        "typeSimple": "bytes32",
        "comment": "Extracted from the request."
      },
      {
        "name": "votingRound",
        "type": "uint64",
        "typeSimple": "uint64",
        "comment": "The ID of the State Connector round in which the request was considered."
      },
      {
        "name": "lowestUsedTimestamp",
        "type": "uint64",
        "typeSimple": "uint64",
        "comment": "The lowest timestamp used to generate the response."
      },
      {
        "name": "requestBody",
        "type": "struct Payment.RequestBody",
        "typeSimple": "RequestBody",
        "comment": "Extracted from the request."
      },
      {
        "name": "responseBody",
        "type": "struct Payment.ResponseBody",
        "typeSimple": "ResponseBody",
        "comment": "Data defining the response. The verification rules for the construction of the response body and the type are defined per specific `attestationType`."
      }
    ]
  },
  "requestBody": {
    "name": "RequestBody",
    "description": "Request body for Payment attestation type",
    "above": "",
    "below": "",
    "fullComment": " @notice Request body for Payment attestation type\n @param transactionId ID of the payment transaction.\n @param inUtxo For UTXO chains, this is the index of the transaction input with source address. Always 0 for the non-utxo chains.\n @param utxo For UTXO chains, this is the index of the transaction output with receiving address. Always 0 for the non-utxo chains.",
    "params": [
      {
        "name": "transactionId",
        "type": "bytes32",
        "typeSimple": "bytes32",
        "comment": "ID of the payment transaction."
      },
      {
        "name": "inUtxo",
        "type": "uint256",
        "typeSimple": "uint256",
        "comment": "For UTXO chains, this is the index of the transaction input with source address. Always 0 for the non-utxo chains."
      },
      {
        "name": "utxo",
        "type": "uint256",
        "typeSimple": "uint256",
        "comment": "For UTXO chains, this is the index of the transaction output with receiving address. Always 0 for the non-utxo chains."
      }
    ]
  },
  "responseBody": {
    "name": "ResponseBody",
    "description": "Response body for Payment attestation type",
    "above": "",
    "below": "",
    "fullComment": " @notice Response body for Payment attestation type\n @param blockNumber Number of the block in which the transaction is included.\n @param blockTimestamp The timestamp of the block in which the transaction is included.\n @param sourceAddressHash Standard address hash of the source address.\n @param sourceAddressesRoot The root of the Merkle tree of the source addresses.\n @param receivingAddressHash Standard address hash of the receiving address.\n The zero 32-byte string if there is no receivingAddress (if `status` is not success).\n @param intendedReceivingAddressHash Standard address hash of the intended receiving address.\n Relevant if the transaction is unsuccessful.\n @param spentAmount Amount in minimal units spent by the source address.\n @param intendedSpentAmount Amount in minimal units to be spent by the source address.\n Relevant if the transaction status is unsuccessful.\n @param receivedAmount Amount in minimal units received by the receiving address.\n @param intendedReceivedAmount Amount in minimal units intended to be received by the receiving address.\n Relevant if the transaction is unsuccessful.\n @param standardPaymentReference Standard payment reference of the transaction.\n @param oneToOne Indicator whether only one source and one receiver are involved in the transaction.\n @param status Succes status of the transaction: 0 - success, 1 - failed by sender's fault,\n 2 - failed by receiver's fault.",
    "params": [
      {
        "name": "blockNumber",
        "type": "uint64",
        "typeSimple": "uint64",
        "comment": "Number of the block in which the transaction is included."
      },
      {
        "name": "blockTimestamp",
        "type": "uint64",
        "typeSimple": "uint64",
        "comment": "The timestamp of the block in which the transaction is included."
      },
      {
        "name": "sourceAddressHash",
        "type": "bytes32",
        "typeSimple": "bytes32",
        "comment": "Standard address hash of the source address."
      },
      {
        "name": "sourceAddressesRoot",
        "type": "bytes32",
        "typeSimple": "bytes32",
        "comment": "The root of the Merkle tree of the source addresses."
      },
      {
        "name": "receivingAddressHash",
        "type": "bytes32",
        "typeSimple": "bytes32",
        "comment": "Standard address hash of the receiving address."
      },
      {
        "name": "intendedReceivingAddressHash",
        "type": "bytes32",
        "typeSimple": "bytes32",
        "comment": "Standard address hash of the intended receiving address."
      },
      {
        "name": "spentAmount",
        "type": "int256",
        "typeSimple": "int256",
        "comment": "Amount in minimal units spent by the source address."
      },
      {
        "name": "intendedSpentAmount",
        "type": "int256",
        "typeSimple": "int256",
        "comment": "Amount in minimal units to be spent by the source address."
      },
      {
        "name": "receivedAmount",
        "type": "int256",
        "typeSimple": "int256",
        "comment": "Amount in minimal units received by the receiving address."
      },
      {
        "name": "intendedReceivedAmount",
        "type": "int256",
        "typeSimple": "int256",
        "comment": "Amount in minimal units intended to be received by the receiving address."
      },
      {
        "name": "standardPaymentReference",
        "type": "bytes32",
        "typeSimple": "bytes32",
        "comment": "Standard payment reference of the transaction."
      },
      {
        "name": "oneToOne",
        "type": "bool",
        "typeSimple": "bool",
        "comment": "Indicator whether only one source and one receiver are involved in the transaction."
      },
      {
        "name": "status",
        "type": "uint8",
        "typeSimple": "uint8",
        "comment": "Succes status of the transaction: 0 - success, 1 - failed by sender's fault,"
      }
    ]
  },
  "requestStructs": [],
  "responseStructs": [],
  "requestAbi": {
    "components": [
      {
        "internalType": "bytes32",
        "name": "attestationType",
        "type": "bytes32"
      },
      {
        "internalType": "bytes32",
        "name": "sourceId",
        "type": "bytes32"
      },
      {
        "internalType": "bytes32",
        "name": "messageIntegrityCode",
        "type": "bytes32"
      },
      {
        "components": [
          {
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "inUtxo",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "utxo",
            "type": "uint256"
          }
        ],
        "internalType": "struct Payment.RequestBody",
        "name": "requestBody",
        "type": "tuple"
      }
    ],
    "internalType": "struct Payment.Request",
    "name": "_request",
    "type": "tuple"
  },
  "responseAbi": {
    "components": [
      {
        "internalType": "bytes32",
        "name": "attestationType",
        "type": "bytes32"
      },
      {
        "internalType": "bytes32",
        "name": "sourceId",
        "type": "bytes32"
      },
      {
        "internalType": "uint64",
        "name": "votingRound",
        "type": "uint64"
      },
      {
        "internalType": "uint64",
        "name": "lowestUsedTimestamp",
        "type": "uint64"
      },
      {
        "components": [
          {
            "internalType": "bytes32",
            "name": "transactionId",
            "type": "bytes32"
          },
          {
            "internalType": "uint256",
            "name": "inUtxo",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "utxo",
            "type": "uint256"
          }
        ],
        "internalType": "struct Payment.RequestBody",
        "name": "requestBody",
        "type": "tuple"
      },
      {
        "components": [
          {
            "internalType": "uint64",
            "name": "blockNumber",
            "type": "uint64"
          },
          {
            "internalType": "uint64",
            "name": "blockTimestamp",
            "type": "uint64"
          },
          {
            "internalType": "bytes32",
            "name": "sourceAddressHash",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "sourceAddressesRoot",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "receivingAddressHash",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "intendedReceivingAddressHash",
            "type": "bytes32"
          },
          {
            "internalType": "int256",
            "name": "spentAmount",
            "type": "int256"
          },
          {
            "internalType": "int256",
            "name": "intendedSpentAmount",
            "type": "int256"
          },
          {
            "internalType": "int256",
            "name": "receivedAmount",
            "type": "int256"
          },
          {
            "internalType": "int256",
            "name": "intendedReceivedAmount",
            "type": "int256"
          },
          {
            "internalType": "bytes32",
            "name": "standardPaymentReference",
            "type": "bytes32"
          },
          {
            "internalType": "bool",
            "name": "oneToOne",
            "type": "bool"
          },
          {
            "internalType": "uint8",
            "name": "status",
            "type": "uint8"
          }
        ],
        "internalType": "struct Payment.ResponseBody",
        "name": "responseBody",
        "type": "tuple"
      }
    ],
    "internalType": "struct Payment.Response",
    "name": "_response",
    "type": "tuple"
  },
  "proofAbi": {
    "components": [
      {
        "internalType": "bytes32[]",
        "name": "merkleProof",
        "type": "bytes32[]"
      },
      {
        "components": [
          {
            "internalType": "bytes32",
            "name": "attestationType",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "sourceId",
            "type": "bytes32"
          },
          {
            "internalType": "uint64",
            "name": "votingRound",
            "type": "uint64"
          },
          {
            "internalType": "uint64",
            "name": "lowestUsedTimestamp",
            "type": "uint64"
          },
          {
            "components": [
              {
                "internalType": "bytes32",
                "name": "transactionId",
                "type": "bytes32"
              },
              {
                "internalType": "uint256",
                "name": "inUtxo",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "utxo",
                "type": "uint256"
              }
            ],
            "internalType": "struct Payment.RequestBody",
            "name": "requestBody",
            "type": "tuple"
          },
          {
            "components": [
              {
                "internalType": "uint64",
                "name": "blockNumber",
                "type": "uint64"
              },
              {
                "internalType": "uint64",
                "name": "blockTimestamp",
                "type": "uint64"
              },
              {
                "internalType": "bytes32",
                "name": "sourceAddressHash",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "sourceAddressesRoot",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "receivingAddressHash",
                "type": "bytes32"
              },
              {
                "internalType": "bytes32",
                "name": "intendedReceivingAddressHash",
                "type": "bytes32"
              },
              {
                "internalType": "int256",
                "name": "spentAmount",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "intendedSpentAmount",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "receivedAmount",
                "type": "int256"
              },
              {
                "internalType": "int256",
                "name": "intendedReceivedAmount",
                "type": "int256"
              },
              {
                "internalType": "bytes32",
                "name": "standardPaymentReference",
                "type": "bytes32"
              },
              {
                "internalType": "bool",
                "name": "oneToOne",
                "type": "bool"
              },
              {
                "internalType": "uint8",
                "name": "status",
                "type": "uint8"
              }
            ],
            "internalType": "struct Payment.ResponseBody",
            "name": "responseBody",
            "type": "tuple"
          }
        ],
        "internalType": "struct Payment.Response",
        "name": "data",
        "type": "tuple"
      }
    ],
    "internalType": "struct Payment.Proof",
    "name": "_proof",
    "type": "tuple"
  }
}